using Lyne.Application.DTO.Auth;
using Lyne.Domain.Entities;
using Lyne.Domain.IRepositories;
using Microsoft.Extensions.Logging;

namespace Lyne.Application.Services;

public class AuthService(IAuthRepository authRepository, IJwtService jwtService, ILogger<AuthService> logger)
{
    public async Task<AuthResponseDto?> LoginAsync(LoginRequestDto loginRequest)
    {
        var user = await authRepository.GetUserByEmailAsync(loginRequest.Email);
        logger.LogInformation("Login with email: {email}", loginRequest.Email);
        if (user == null || !VerifyPassword(loginRequest.Password, user.PasswordHash))
        {
            logger.LogWarning("Invalid login attempt");
            return null;
        }

        var token = jwtService.GenerateToken(user);
        logger.LogInformation("Login with id: {id} successfully", user.Id);
        return new AuthResponseDto
        {
            Token = token,
            Email = user.Email,
            Name = user.Name,
            ForName = user.ForName,
            ExpiresAt = DateTime.UtcNow.AddHours(24)
        };
    }

    public async Task<AuthResponseDto?> RegisterAsync(RegisterRequestDto registerRequest)
    {
        logger.LogInformation("Registering new user: {email}", registerRequest.Email);
        if (await authRepository.UserExistsAsync(registerRequest.Email))
        {
            logger.LogWarning("Email {email} already exists", registerRequest.Email);
            return null;
        }

        // Create a new address for the user
        var address = new Address
        {
            Id = 0, // Will be auto-generated
            Street = "Default Street",
            City = "Default City",
            State = "Default State",
            Zip = "00000",
            Country = "Україна"
        };

        var createdAddress = await authRepository.CreateAddressAsync(address);
        logger.LogInformation("Created address: {address}", createdAddress);
        var user = new User
        {
            Id = 0, // Will be auto-generated by database
            Name = registerRequest.Name,
            ForName = registerRequest.ForName,
            Email = registerRequest.Email,
            PasswordHash = HashPassword(registerRequest.Password),
            Genre = registerRequest.Genre ?? "",
            DateOfBirth = registerRequest.DateOfBirth,
            PhoneNumber = registerRequest.PhoneNumber,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow,
            AddressId = createdAddress.Id
        };

        var createdUser = await authRepository.CreateUserAsync(user);
        logger.LogInformation("Created user with id: {userId}", createdUser.Id);
        var token = jwtService.GenerateToken(createdUser);
        logger.LogInformation("Registration with id: {id} successfully", createdUser.Id);
        return new AuthResponseDto
        {
            Token = token,
            Email = createdUser.Email,
            Name = createdUser.Name,
            ForName = createdUser.ForName,
            ExpiresAt = DateTime.UtcNow.AddHours(24)
        };
    }

    private static string HashPassword(string password)
    {
        return BCrypt.Net.BCrypt.HashPassword(password);
    }

    private static bool VerifyPassword(string password, string hash)
    {
        // For testing with seed data, check if it's the simple hash
        if (hash == "hashedpassword123" && password == "password123")
        {
            return true;
        }

        // For new users, use BCrypt verification
        try
        {
            return BCrypt.Net.BCrypt.Verify(password, hash);
        }
        catch
        {
            return false;
        }
    }

    public async Task<AuthResponseDto?> LoginWithGoogleAsync(string email, string? fullName)
    {
        var user = await authRepository.GetUserByEmailAsync(email);
        if (user == null)
        {
            var randomPassword = GenerateRandomPassword();

            user = new User
            {
                Email = email,
                Name = fullName ?? "Google User",
                ForName = "",
                PasswordHash = HashPassword(randomPassword),
                Genre = "",
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            user = await authRepository.CreateUserAsync(user);
            // Потім можна надіслати лист для зміни пароля/надіслати пароль
        }

        var token = jwtService.GenerateToken(user);

        return new AuthResponseDto
        {
            Token = token,
            Email = user.Email,
            Name = user.Name,
            ForName = user.ForName,
            ExpiresAt = DateTime.UtcNow.AddHours(24)
        };
    }

    private string GenerateRandomPassword(int length = 16)
    {
        const string validChars = "ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*?";
        var random = new Random();
        return new string(Enumerable.Range(0, length).Select(_ => validChars[random.Next(validChars.Length)]).ToArray());
    }

}